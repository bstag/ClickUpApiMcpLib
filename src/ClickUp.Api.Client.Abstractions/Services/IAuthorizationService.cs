//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Threading;
using System.Threading.Tasks;
using ClickUp.Api.Client.Models;
using ClickUp.Api.Client.Models.ResponseModels.Authorization; // Assuming models will be in this namespace

namespace ClickUp.Api.Client.Abstractions
{
    /// <summary>
    /// Interface for ClickUp Authorization Service.
    /// Provides methods for OAuth 2.0 authentication and retrieving authorized user and team information.
    /// </summary>
    public interface IAuthorizationService
    {
        /// <summary>
        /// Exchanges an authorization code for an access token.
        /// </summary>
        /// <param name="clientId">OAuth app client ID.</param>
        /// <param name="clientSecret">OAuth app client secret.</param>
        /// <param name="code">Authorization code received from redirect.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the access token.</returns>
        Task<object> GetAccessTokenAsync(string clientId, string clientSecret, string code);
        // Note: Return type 'object' should be AccessTokenDto.

        /// <summary>
        /// Retrieves the details of the authenticated user.
        /// </summary>
        /// <returns>A task that represents the asynchronous operation. The task result contains the authorized user's details.</returns>
        Task<object> GetAuthorizedUserAsync();
        // Note: Return type 'object' should be a DTO representing the User object (e.g., UserDto from GetAuthorizedUserresponse).

        /// <summary>
        /// Retrieves the Workspaces available to the authenticated user.
        /// </summary>
        /// <returns>A task that represents the asynchronous operation. The task result contains a list of authorized Workspaces.</returns>
        Task<IEnumerable<object>> GetAuthorizedWorkspacesAsync();
        // Note: Return type 'IEnumerable<object>' should be IEnumerable<WorkspaceDto>.
    }
}
